"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[523],{7945:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new empty binary tree.","params":[],"returns":[{"desc":"Empty binary tree instance.","lua_type":"BinaryTreeType<T>"}],"function_type":"static","source":{"line":73,"path":"src/BinaryTree.luau"}},{"name":"getBinaryTree","desc":"Returns the full contents of the binary tree in pre-order (root-left-right) traversal.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"An array containing all values in pre-order.","lua_type":"{T}"}],"function_type":"static","source":{"line":87,"path":"src/BinaryTree.luau"}},{"name":"size","desc":"Returns the number of elements in the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"The number of elements currently in the tree.","lua_type":"number"}],"function_type":"static","source":{"line":105,"path":"src/BinaryTree.luau"}},{"name":"copy","desc":"Creates a deep copy of the binary tree.\\nIf binary tree is empty, it will error.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"A new binary tree containing all elements from the original.","lua_type":"BinaryTreeType<T>"}],"function_type":"static","source":{"line":116,"path":"src/BinaryTree.luau"}},{"name":"clear","desc":"Removes all elements from the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[],"function_type":"static","source":{"line":136,"path":"src/BinaryTree.luau"}},{"name":"insert","desc":"Inserts a new value into the binary tree, preserving the binary search tree property.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"},{"name":"value","desc":"The value to insert into the tree.","lua_type":"T"}],"returns":[],"function_type":"static","source":{"line":147,"path":"src/BinaryTree.luau"}},{"name":"contains","desc":"Checks whether a value exists in the tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"},{"name":"value","desc":"The value to search for.","lua_type":"T"}],"returns":[{"desc":"true if the value exists in the tree, otherwise false.","lua_type":"boolean"}],"function_type":"static","source":{"line":170,"path":"src/BinaryTree.luau"}},{"name":"remove","desc":"Removes a value from the binary tree if it exists.\\nWill warn if the value is not in the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"},{"name":"value","desc":"The value to remove from the tree.","lua_type":"T"}],"returns":[],"function_type":"static","source":{"line":190,"path":"src/BinaryTree.luau"}},{"name":"min","desc":"Returns the smallest value in the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"The minimum value, or nil if the tree is empty.","lua_type":"T?"}],"function_type":"static","source":{"line":235,"path":"src/BinaryTree.luau"}},{"name":"max","desc":"Returns the largest value in the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"The maximum value, or nil if the tree is empty.","lua_type":"T?"}],"function_type":"static","source":{"line":250,"path":"src/BinaryTree.luau"}},{"name":"height","desc":"Calculates the height of the binary tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"The height of the tree (max depth). Returns -1 if the tree is empty.","lua_type":"number"}],"function_type":"static","source":{"line":265,"path":"src/BinaryTree.luau"}},{"name":"traverseInOrder","desc":"Returns an in-order (left-root-right) traversal of the tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"Array of values in in-order traversal.","lua_type":"{T}"}],"function_type":"static","source":{"line":279,"path":"src/BinaryTree.luau"}},{"name":"traversePreOrder","desc":"Returns a pre-order (root-left-right) traversal of the tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"Array of values in pre-order traversal.","lua_type":"{T}"}],"function_type":"static","source":{"line":297,"path":"src/BinaryTree.luau"}},{"name":"traversePostOrder","desc":"Returns a post-order (left-right-root) traversal of the tree.","params":[{"name":"self","desc":"","lua_type":"InternalBinaryTree<T>"}],"returns":[{"desc":"Array of values in post-order traversal.","lua_type":"{T}"}],"function_type":"static","source":{"line":315,"path":"src/BinaryTree.luau"}}],"properties":[],"types":[],"name":"BinaryTree","desc":"Binary tree class\\r","source":{"line":31,"path":"src/BinaryTree.luau"}}')}}]);