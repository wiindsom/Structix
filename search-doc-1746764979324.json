{"searchDocs":[{"title":"Deque","type":0,"sectionRef":"#","url":"/Structix/api/Deque","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#new","content":"&lt;/&gt; Deque.new() → DequeType&lt;T&gt;-- A new empty deque. Creates a new empty Deque instance.  ","version":null,"tagName":"h3"},{"title":"getDeque​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#getDeque","content":"&lt;/&gt; Deque.getDeque(self: InternalDeque&lt;T&gt;) → {T}-- A table containing all elements in deque order. Returns a shallow array copy of the current deque in front-to-back order.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#size","content":"&lt;/&gt; Deque.size(self: InternalDeque&lt;T&gt;) → number-- The size of the deque. Returns the number of elements in the deque.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#copy","content":"&lt;/&gt; Deque.copy(self: InternalDeque&lt;T&gt;) → DequeType&lt;T&gt;-- A copy of the current deque. Returns a new deque with the same elements as this one. Throws an error if the deque is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#clear","content":"&lt;/&gt; Deque.clear(self: InternalDeque&lt;T&gt;) → () Removes all elements from the deque.  ","version":null,"tagName":"h3"},{"title":"pushFirst​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#pushFirst","content":"&lt;/&gt; Deque.pushFirst( self: InternalDeque&lt;T&gt;, value: T-- The value to insert. ) → () Inserts a value at the front of the deque.  ","version":null,"tagName":"h3"},{"title":"pushLast​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#pushLast","content":"&lt;/&gt; Deque.pushLast( self: InternalDeque&lt;T&gt;, value: T-- The value to insert. ) → () Inserts a value at the back of the deque.  ","version":null,"tagName":"h3"},{"title":"popFirst​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#popFirst","content":"&lt;/&gt; Deque.popFirst(self: InternalDeque&lt;T&gt;) → T?-- The removed value, or nil if the deque is empty. Removes and returns the value at the front of the deque.  ","version":null,"tagName":"h3"},{"title":"popLast​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#popLast","content":"&lt;/&gt; Deque.popLast(self: InternalDeque&lt;T&gt;) → T?-- The removed value, or nil if the deque is empty. Removes and returns the value at the back of the deque.  ","version":null,"tagName":"h3"},{"title":"peekFirst​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#peekFirst","content":"&lt;/&gt; Deque.peekFirst(self: InternalDeque&lt;T&gt;) → T?-- The front value, or nil if the deque is empty. Returns the value at the front of the deque without removing it.  ","version":null,"tagName":"h3"},{"title":"peekLast​","type":1,"pageTitle":"Deque","url":"/Structix/api/Deque#peekLast","content":"&lt;/&gt; Deque.peekLast(self: InternalDeque&lt;T&gt;) → T?-- The back value, or nil if the deque is empty. Returns the value at the back of the deque without removing it. ","version":null,"tagName":"h3"},{"title":"BinaryTree","type":0,"sectionRef":"#","url":"/Structix/api/BinaryTree","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#new","content":"&lt;/&gt; BinaryTree.new() → BinaryTreeType&lt;T&gt;-- Empty binary tree instance. Creates a new empty binary tree.  ","version":null,"tagName":"h3"},{"title":"getBinaryTree​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#getBinaryTree","content":"&lt;/&gt; BinaryTree.getBinaryTree(self: InternalBinaryTree&lt;T&gt;) → {T}-- An array containing all values in pre-order. Returns the full contents of the binary tree in pre-order (root-left-right) traversal.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#size","content":"&lt;/&gt; BinaryTree.size(self: InternalBinaryTree&lt;T&gt;) → number-- The number of elements currently in the tree. Returns the number of elements in the binary tree.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#copy","content":"&lt;/&gt; BinaryTree.copy(self: InternalBinaryTree&lt;T&gt;) → BinaryTreeType&lt;T&gt;-- A new binary tree containing all elements from the original. Creates a deep copy of the binary tree. Throws an error if the binary tree is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#clear","content":"&lt;/&gt; BinaryTree.clear(self: InternalBinaryTree&lt;T&gt;) → () Removes all elements from the binary tree.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#insert","content":"&lt;/&gt; BinaryTree.insert( self: InternalBinaryTree&lt;T&gt;, value: T-- The value to insert into the tree. ) → () Inserts a new value into the binary tree, preserving the binary search tree property.  ","version":null,"tagName":"h3"},{"title":"contains​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#contains","content":"&lt;/&gt; BinaryTree.contains( self: InternalBinaryTree&lt;T&gt;, value: T-- The value to search for. ) → boolean-- true if the value exists in the tree, otherwise false. Checks whether a value exists in the tree.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#remove","content":"&lt;/&gt; BinaryTree.remove( self: InternalBinaryTree&lt;T&gt;, value: T-- The value to remove from the tree. ) → () Removes a value from the binary tree if it exists. Will warn if the value is not in the binary tree.  ","version":null,"tagName":"h3"},{"title":"min​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#min","content":"&lt;/&gt; BinaryTree.min(self: InternalBinaryTree&lt;T&gt;) → T?-- The minimum value, or nil if the tree is empty. Returns the smallest value in the binary tree.  ","version":null,"tagName":"h3"},{"title":"max​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#max","content":"&lt;/&gt; BinaryTree.max(self: InternalBinaryTree&lt;T&gt;) → T?-- The maximum value, or nil if the tree is empty. Returns the largest value in the binary tree.  ","version":null,"tagName":"h3"},{"title":"height​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#height","content":"&lt;/&gt; BinaryTree.height(self: InternalBinaryTree&lt;T&gt;) → number-- The height of the tree (max depth). Returns -1 if the tree is empty. Calculates the height of the binary tree.  ","version":null,"tagName":"h3"},{"title":"traverseInOrder​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#traverseInOrder","content":"&lt;/&gt; BinaryTree.traverseInOrder(self: InternalBinaryTree&lt;T&gt;) → {T}-- Array of values in in-order traversal. Returns an in-order (left-root-right) traversal of the tree.  ","version":null,"tagName":"h3"},{"title":"traversePreOrder​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#traversePreOrder","content":"&lt;/&gt; BinaryTree.traversePreOrder(self: InternalBinaryTree&lt;T&gt;) → {T}-- Array of values in pre-order traversal. Returns a pre-order (root-left-right) traversal of the tree.  ","version":null,"tagName":"h3"},{"title":"traversePostOrder​","type":1,"pageTitle":"BinaryTree","url":"/Structix/api/BinaryTree#traversePostOrder","content":"&lt;/&gt; BinaryTree.traversePostOrder(self: InternalBinaryTree&lt;T&gt;) → {T}-- Array of values in post-order traversal. Returns a post-order (left-right-root) traversal of the tree. ","version":null,"tagName":"h3"},{"title":"Collection","type":0,"sectionRef":"#","url":"/Structix/api/Collection","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#new","content":"&lt;/&gt; Collection.new() → CollectionType&lt;T&gt;-- A new, empty collection. Creates a new Collection.  ","version":null,"tagName":"h3"},{"title":"getCollection​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#getCollection","content":"&lt;/&gt; Collection.getCollection(self: InternalCollection&lt;T&gt;) → {T}-- A table containing all elements in the collection. Returns a shallow array copy of the collection.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#size","content":"&lt;/&gt; Collection.size(self: InternalCollection&lt;T&gt;) → number-- The size of the collection. Returns the number of elements in the collection.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#copy","content":"&lt;/&gt; Collection.copy(self: InternalCollection&lt;T&gt;) → CollectionType&lt;T&gt;-- A duplicate of the collection. Returns a shallow copy of the current collection. Throws an error if the collection is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#clear","content":"&lt;/&gt; Collection.clear(self: InternalCollection&lt;T&gt;) → () Removes all elements from the collection.  ","version":null,"tagName":"h3"},{"title":"add​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#add","content":"&lt;/&gt; Collection.add( self: InternalCollection&lt;T&gt;, value: T-- The value to add. ) → () Appends a value to the end of the collection.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#insert","content":"&lt;/&gt; Collection.insert( self: InternalCollection&lt;T&gt;, index: number,-- The index to insert at (0-based). value: T-- The value to insert. ) → () Inserts a value at a given index.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#remove","content":"&lt;/&gt; Collection.remove( self: InternalCollection&lt;T&gt;, index: number-- The index to remove (0-based). ) → T-- The value removed from the collection. Removes and returns the value at the specified index.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#get","content":"&lt;/&gt; Collection.get( self: InternalCollection&lt;T&gt;, index: number-- The index to retrieve (0-based). ) → T-- The value at the specified index. Retrieves the value at a specific index.  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#set","content":"&lt;/&gt; Collection.set( self: InternalCollection&lt;T&gt;, index: number,-- The index to modify (0-based). value: T-- The new value to set. ) → () Replaces the value at a given index.  ","version":null,"tagName":"h3"},{"title":"contains​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#contains","content":"&lt;/&gt; Collection.contains( self: InternalCollection&lt;T&gt;, value: T-- The value to check for. ) → boolean-- True if the value is found, otherwise false. Checks whether the collection contains a specific value.  ","version":null,"tagName":"h3"},{"title":"forEach​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#forEach","content":"&lt;/&gt; Collection.forEach( self: InternalCollection&lt;T&gt;, callback: ( value: T, index: number ) → ()-- The function to apply to each element. ) → () Executes a function for each element in the collection.  ","version":null,"tagName":"h3"},{"title":"map​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#map","content":"&lt;/&gt; Collection.map( self: InternalCollection&lt;T&gt;, callback: ( value: T, index: number ) → U-- The transformation function. ) → CollectionType&lt;U&gt;-- A new collection with transformed values. Transforms each element in the collection using the callback.  ","version":null,"tagName":"h3"},{"title":"filter​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#filter","content":"&lt;/&gt; Collection.filter( self: InternalCollection&lt;T&gt;, predicate: ( value: T, index: number ) → boolean-- The filter condition. ) → CollectionType&lt;T&gt;-- A new collection with values that match the condition. Filters the collection based on a predicate function.  ","version":null,"tagName":"h3"},{"title":"reverse​","type":1,"pageTitle":"Collection","url":"/Structix/api/Collection#reverse","content":"&lt;/&gt; Collection.reverse(self: InternalCollection&lt;T&gt;) → () Reverses the collection in place. ","version":null,"tagName":"h3"},{"title":"LinkedList","type":0,"sectionRef":"#","url":"/Structix/api/LinkedList","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#new","content":"&lt;/&gt; LinkedList.new() → LinkedListType&lt;T&gt; Creates a new empty linked list.  ","version":null,"tagName":"h3"},{"title":"getLinkedList​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#getLinkedList","content":"&lt;/&gt; LinkedList.getLinkedList(self: InternalLinkedList&lt;T&gt;) → {T}-- Array of values in the linked list. Returns the contents of the linked list as an array.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#size","content":"&lt;/&gt; LinkedList.size(self: InternalLinkedList&lt;T&gt;) → number Returns the number of elements in the list.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#copy","content":"&lt;/&gt; LinkedList.copy(self: InternalLinkedList&lt;T&gt;) → LinkedListType&lt;T&gt; Returns a deep copy of the linked list. Throws an error if the linked list is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#clear","content":"&lt;/&gt; LinkedList.clear(self: InternalLinkedList&lt;T&gt;) → () Clears all elements from the linked list.  ","version":null,"tagName":"h3"},{"title":"insertFirst​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#insertFirst","content":"&lt;/&gt; LinkedList.insertFirst( self: InternalLinkedList&lt;T&gt;, value: T ) → () Inserts a value at the beginning of the list.  ","version":null,"tagName":"h3"},{"title":"insertLast​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#insertLast","content":"&lt;/&gt; LinkedList.insertLast( self: InternalLinkedList&lt;T&gt;, value: T ) → () Inserts a value at the end of the list.  ","version":null,"tagName":"h3"},{"title":"removeFirst​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#removeFirst","content":"&lt;/&gt; LinkedList.removeFirst(self: InternalLinkedList&lt;T&gt;) → T? Removes and returns the first value in the list.  ","version":null,"tagName":"h3"},{"title":"removeLast​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#removeLast","content":"&lt;/&gt; LinkedList.removeLast(self: InternalLinkedList&lt;T&gt;) → T? Removes and returns the last value in the list.  ","version":null,"tagName":"h3"},{"title":"peekFirst​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#peekFirst","content":"&lt;/&gt; LinkedList.peekFirst(self: InternalLinkedList&lt;T&gt;) → T? Returns the first value without removing it.  ","version":null,"tagName":"h3"},{"title":"peekLast​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#peekLast","content":"&lt;/&gt; LinkedList.peekLast(self: InternalLinkedList&lt;T&gt;) → T? Returns the last value without removing it.  ","version":null,"tagName":"h3"},{"title":"contains​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#contains","content":"&lt;/&gt; LinkedList.contains( self: InternalLinkedList&lt;T&gt;, value: T ) → boolean Checks if the list contains a given value.  ","version":null,"tagName":"h3"},{"title":"insertAt​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#insertAt","content":"&lt;/&gt; LinkedList.insertAt( self: InternalLinkedList&lt;T&gt;, index: number, value: T ) → () Inserts a value at a specific index.  ","version":null,"tagName":"h3"},{"title":"removeAt​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#removeAt","content":"&lt;/&gt; LinkedList.removeAt( self: InternalLinkedList&lt;T&gt;, index: number ) → T? Removes and returns the value at a specific index.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#get","content":"&lt;/&gt; LinkedList.get( self: InternalLinkedList&lt;T&gt;, index: number ) → T? Gets the value at a specific index.  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#set","content":"&lt;/&gt; LinkedList.set( self: InternalLinkedList&lt;T&gt;, index: number, value: T ) → () Sets the value at a specific index.  ","version":null,"tagName":"h3"},{"title":"reverse​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#reverse","content":"&lt;/&gt; LinkedList.reverse(self: InternalLinkedList&lt;T&gt;) → () Reverses the order of the list in-place.  ","version":null,"tagName":"h3"},{"title":"map​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#map","content":"&lt;/&gt; LinkedList.map( self: InternalLinkedList&lt;T&gt;, callback: ( index: number, value: T ) → U ) → {U} Creates a new array by applying a callback to each value.  ","version":null,"tagName":"h3"},{"title":"filter​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#filter","content":"&lt;/&gt; LinkedList.filter( self: InternalLinkedList&lt;T&gt;, callback: ( index: number, value: T ) → boolean ) → LinkedListType&lt;T&gt; Creates a new linked list containing only values that satisfy the predicate.  ","version":null,"tagName":"h3"},{"title":"forEach​","type":1,"pageTitle":"LinkedList","url":"/Structix/api/LinkedList#forEach","content":"&lt;/&gt; LinkedList.forEach( self: InternalLinkedList&lt;T&gt;, callback: ( index: number, value: T ) → () ) → () Calls the given callback for each value in the list. ","version":null,"tagName":"h3"},{"title":"Heap","type":0,"sectionRef":"#","url":"/Structix/api/Heap","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#new","content":"&lt;/&gt; Heap.new( mode: &quot;min&quot; | &quot;max&quot;?,-- Whether the heap behaves as a min-heap or max-heap (default is &quot;min&quot;). comparator: (( a: T, b: T ) → boolean)?-- Optional custom comparison function for complex data types. ) → HeapType&lt;T&gt;-- A new heap instance. Creates a new heap instance with the specified mode and optional comparator.  ","version":null,"tagName":"h3"},{"title":"getHeap​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#getHeap","content":"&lt;/&gt; Heap.getHeap(self: InternalHeap&lt;T&gt;) → {T}-- Array of elements currently stored in the heap. Returns a shallow copy of the internal heap array.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#size","content":"&lt;/&gt; Heap.size(self: InternalHeap&lt;T&gt;) → number-- The number of elements in the heap. Returns the number of elements in the heap.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#copy","content":"&lt;/&gt; Heap.copy(self: InternalHeap&lt;T&gt;) → HeapType&lt;T&gt;-- A new heap with the same elements and configuration. Returns a new deep copy of the current heap instance. Throws an error if the heap is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#clear","content":"&lt;/&gt; Heap.clear(self: InternalHeap&lt;T&gt;) → () Clears all elements from the heap.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#insert","content":"&lt;/&gt; Heap.insert( self: InternalHeap&lt;T&gt;, value: T-- The value to insert. ) → () Inserts a new value into the heap.  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#peek","content":"&lt;/&gt; Heap.peek(self: InternalHeap&lt;T&gt;) → T?-- The highest or lowest priority value, depending on the heap mode. Returns the top element from the heap without removing it.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Heap","url":"/Structix/api/Heap#remove","content":"&lt;/&gt; Heap.remove(self: InternalHeap&lt;T&gt;) → T?-- The removed highest or lowest priority value. Removes and returns the top element from the heap. ","version":null,"tagName":"h3"},{"title":"PriorityQueue","type":0,"sectionRef":"#","url":"/Structix/api/PriorityQueue","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#new","content":"&lt;/&gt; PriorityQueue.new( mode?: &quot;min&quot; | &quot;max&quot;,-- The priority behavior mode. Defaults to &quot;min&quot;. comparator?: ( a: number, b: number ) → boolean-- Optional comparator to customize ordering. ) → PriorityQueueType&lt;T&gt; Creates a new empty priority queue.  ","version":null,"tagName":"h3"},{"title":"getPriorityQueue​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#getPriorityQueue","content":"&lt;/&gt; PriorityQueue.getPriorityQueue(self: InternalPriorityQueue&lt;T&gt;) → {{ value: T, priority: number }} Returns a shallow copy of the internal heap array, preserving value-priority pairs.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#size","content":"&lt;/&gt; PriorityQueue.size(self: InternalPriorityQueue&lt;T&gt;) → number Returns the number of elements in the priority queue.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#copy","content":"&lt;/&gt; PriorityQueue.copy(self: InternalPriorityQueue&lt;T&gt;) → PriorityQueueType&lt;T&gt; Returns a deep copy of the current priority queue. Throws an error if the priority queue is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#clear","content":"&lt;/&gt; PriorityQueue.clear(self: InternalPriorityQueue&lt;T&gt;) → () Removes all elements from the queue.  ","version":null,"tagName":"h3"},{"title":"enqueue​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#enqueue","content":"&lt;/&gt; PriorityQueue.enqueue( self: InternalPriorityQueue&lt;T&gt;, value: T,-- The value to enqueue. priority: number-- The priority of the value. ) → () Inserts a value into the queue with the specified priority.  ","version":null,"tagName":"h3"},{"title":"dequeue​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#dequeue","content":"&lt;/&gt; PriorityQueue.dequeue(self: InternalPriorityQueue&lt;T&gt;) → T?-- Returns the dequeued value or nil if the queue is empty. Removes and returns the value with the highest priority (depending on mode).  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"PriorityQueue","url":"/Structix/api/PriorityQueue#peek","content":"&lt;/&gt; PriorityQueue.peek(self: InternalPriorityQueue&lt;T&gt;) → T?-- Returns the value or nil if the queue is empty. Returns the value with the highest priority without removing it. ","version":null,"tagName":"h3"},{"title":"Map","type":0,"sectionRef":"#","url":"/Structix/api/Map","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#new","content":"&lt;/&gt; Map.new() → MapType&lt;K,V&gt; Creates a new empty map.  ","version":null,"tagName":"h3"},{"title":"getMap​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#getMap","content":"&lt;/&gt; Map.getMap(self: InternalMap&lt;K,V&gt;) → {[K]: V} Returns a shallow copy of the internal hash map.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#size","content":"&lt;/&gt; Map.size(self: InternalMap&lt;K,V&gt;) → number Returns the number of entries in the map.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#copy","content":"&lt;/&gt; Map.copy(self: InternalMap&lt;K,V&gt;) → MapType&lt;K,V&gt; Creates and returns a deep copy of the map. Throws an error if the map is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#clear","content":"&lt;/&gt; Map.clear(self: InternalMap&lt;K,V&gt;) → () Removes all entries from the map.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#get","content":"&lt;/&gt; Map.get( self: InternalMap&lt;K,V&gt;, key: K ) → V? Retrieves a value by key.  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#set","content":"&lt;/&gt; Map.set( self: InternalMap&lt;K,V&gt;, key: K, value: V ) → () Adds or updates a key-value pair in the map.  ","version":null,"tagName":"h3"},{"title":"has​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#has","content":"&lt;/&gt; Map.has( self: InternalMap&lt;K,V&gt;, key: K ) → boolean Checks if the map contains the given key.  ","version":null,"tagName":"h3"},{"title":"delete​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#delete","content":"&lt;/&gt; Map.delete( self: InternalMap&lt;K,V&gt;, key: K ) → () Removes a key-value pair by key.  ","version":null,"tagName":"h3"},{"title":"keys​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#keys","content":"&lt;/&gt; Map.keys(self: InternalMap&lt;K,V&gt;) → {K} Returns an array of all keys in the map.  ","version":null,"tagName":"h3"},{"title":"values​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#values","content":"&lt;/&gt; Map.values(self: InternalMap&lt;K,V&gt;) → {V} Returns an array of all values in the map.  ","version":null,"tagName":"h3"},{"title":"entries​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#entries","content":"&lt;/&gt; Map.entries(self: InternalMap&lt;K,V&gt;) → {{ key: K, value: V }} Returns an array of all key-value entries in the map.  ","version":null,"tagName":"h3"},{"title":"filter​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#filter","content":"&lt;/&gt; Map.filter( self: InternalMap&lt;K,V&gt;, callback: ( key: K, value: V ) → boolean ) → MapType&lt;K,V&gt; Filters the map using a predicate function, returning a new map with only matching entries.  ","version":null,"tagName":"h3"},{"title":"forEach​","type":1,"pageTitle":"Map","url":"/Structix/api/Map#forEach","content":"&lt;/&gt; Map.forEach( self: InternalMap&lt;K,V&gt;, callback: ( key: K, value: V ) → () ) → () Executes a function for each key-value pair in the map. ","version":null,"tagName":"h3"},{"title":"Queue","type":0,"sectionRef":"#","url":"/Structix/api/Queue","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#new","content":"&lt;/&gt; Queue.new() → QueueType&lt;T&gt; Creates a new empty Queue.  ","version":null,"tagName":"h3"},{"title":"getQueue​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#getQueue","content":"&lt;/&gt; Queue.getQueue(self: InternalQueue&lt;T&gt;) → {T} Returns a shallow copy of the internal queue from front to back.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#size","content":"&lt;/&gt; Queue.size(self: InternalQueue&lt;T&gt;) → number Returns the number of elements currently in the queue.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#copy","content":"&lt;/&gt; Queue.copy(self: InternalQueue&lt;T&gt;) → QueueType&lt;T&gt; Returns a copy of the current queue and its contents. Throws an error if the queue is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#clear","content":"&lt;/&gt; Queue.clear(self: InternalQueue&lt;T&gt;) → () Removes all elements from the queue.  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#get","content":"&lt;/&gt; Queue.get( self: InternalQueue&lt;T&gt;, index: number-- Index starting from 0 ) → T Returns the value at a given index relative to the front of the queue.  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#peek","content":"&lt;/&gt; Queue.peek(self: InternalQueue&lt;T&gt;) → T-- The element at the front Returns the element at the front of the queue without removing it. Throws an error if the queue is empty.  ","version":null,"tagName":"h3"},{"title":"enqueue​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#enqueue","content":"&lt;/&gt; Queue.enqueue( self: InternalQueue&lt;T&gt;, value: T-- The value to add ) → () Adds an element to the back of the queue.  ","version":null,"tagName":"h3"},{"title":"dequeue​","type":1,"pageTitle":"Queue","url":"/Structix/api/Queue#dequeue","content":"&lt;/&gt; Queue.dequeue(self: InternalQueue&lt;T&gt;) → T-- The removed element Removes and returns the front element of the queue. Throws an error if the queue is empty. ","version":null,"tagName":"h3"},{"title":"Stack","type":0,"sectionRef":"#","url":"/Structix/api/Stack","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#new","content":"&lt;/&gt; Stack.new() → StackType&lt;T&gt; Creates a new empty stack.  ","version":null,"tagName":"h3"},{"title":"getStack​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#getStack","content":"&lt;/&gt; Stack.getStack(self: InternalStack&lt;T&gt;) → {T} Returns a shallow copy of the internal stack from top to bottom.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#size","content":"&lt;/&gt; Stack.size(self: InternalStack&lt;T&gt;) → number Returns the number of elements currently in the stack.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#copy","content":"&lt;/&gt; Stack.copy(self: InternalStack&lt;T&gt;) → StackType&lt;T&gt; Returns a deep copy of the stack.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#clear","content":"&lt;/&gt; Stack.clear(self: InternalStack&lt;T&gt;) → () Removes all elements from the stack.  ","version":null,"tagName":"h3"},{"title":"reverse​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#reverse","content":"&lt;/&gt; Stack.reverse(self: InternalStack&lt;T&gt;) → () Reverses the order of the elements in the stack.  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#peek","content":"&lt;/&gt; Stack.peek(self: InternalStack&lt;T&gt;) → T-- The value at the top of the stack. Returns the top value of the stack without removing it. Throws an error if the stack is empty.  ","version":null,"tagName":"h3"},{"title":"push​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#push","content":"&lt;/&gt; Stack.push( self: InternalStack&lt;T&gt;, value: T ) → () Adds a new value to the top of the stack.  ","version":null,"tagName":"h3"},{"title":"pop​","type":1,"pageTitle":"Stack","url":"/Structix/api/Stack#pop","content":"&lt;/&gt; Stack.pop(self: InternalStack&lt;T&gt;) → T-- The value that was removed. Removes and returns the top value of the stack. Throws an error if the stack is empty. ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Structix/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Pre-Requisite​","type":1,"pageTitle":"Getting Started","url":"/Structix/docs/intro#pre-requisite","content":" Structix started as a simple side project something I didn’t expect to go far with. If you're unfamiliar with any of the data structures showcased here, or if you're not sure how they work or what they’re for, I recommend taking a moment to research them online. A solid understanding of their general behavior and use cases will help you get the most out of this library. If you're still with me, great. I’ll do my best to explain each structure and how it functions within Structix → Dive Into The Concepts   ","version":"Next","tagName":"h2"},{"title":"Concepts","type":0,"sectionRef":"#","url":"/Structix/docs/concepts","content":"","keywords":"","version":"Next"},{"title":"Binary Tree​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#binary-tree","content":" A Binary Tree branches like a decision tree. Each node has two children: left and right. When ordered, it becomes a Binary Search Tree, which makes lookups fast. Trees model hierarchies, expressions, file systems, and even spatial zones in games. Learn More About Binary Trees    ","version":"Next","tagName":"h2"},{"title":"Collection​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#collection","content":" A Collection is a flexible, ordered group of items like a dynamic array. It gives you tools to manipulate, iterate, and transform values in bulk. Think of it as a friendly workspace for general-purpose list processing, filtering, and reshaping data. Learn More About Collections    ","version":"Next","tagName":"h2"},{"title":"Deque​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#deque","content":" A Deque (also known as a Double Ended Queue) gives you control at both ends. You can add or remove items from the front or back. It’s flexible and ideal when you need both stack and queue behaviors think of it as a two-way street for data flow. Learn More About Deques    ","version":"Next","tagName":"h2"},{"title":"Heap​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#heap","content":" A Heap keeps the most important item (according to your rules) at the top. In a min-heap, the smallest item rises. In a max-heap, the largest does. Heaps power efficient priority management like job schedulers and pathfinding. Learn More About Heaps    ","version":"Next","tagName":"h2"},{"title":"Linked List​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#linked-list","content":" A LinkedList connects data like a chain. Each piece points to the next (and sometimes the previous). It’s not fast for random access but excels at efficient insertions and deletions especially in the middle. Use it when flexibility beats speed. Learn More About Linked Lists    ","version":"Next","tagName":"h2"},{"title":"Map​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#map","content":" A Map (or dictionary) links keys to values. You use a key to retrieve its paired value. It’s ideal for storing associations like a username mapped to a score, or an item ID mapped to its description. Maps are essential for fast lookups. Learn More About Maps    ","version":"Next","tagName":"h2"},{"title":"Priority Queue​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#priority-queue","content":" A PriorityQueue is like a line where some people are allowed to cut in front based on urgency. Each element has a priority. The queue always serves the most critical item first. It's a higher-level abstraction built on a heap, perfect for game events, task queues, or AI decision systems. Learn More About Priority Queues    ","version":"Next","tagName":"h2"},{"title":"Queue​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#queue","content":" A Queue is a line of people waiting their turn. It follows First-In, First-Out (FIFO). The first element in is the first to be removed. Queues are perfect for scheduling, turn-based logic, and managing sequences where order matters. Learn More About Queues    ","version":"Next","tagName":"h2"},{"title":"Set​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#set","content":" A Set is a collection of unique items. No duplicates allowed. It’s great for checking membership, enforcing uniqueness, and doing operations like unions, intersections, and differences just like in mathematics. Learn More About Sets    ","version":"Next","tagName":"h2"},{"title":"Stack​","type":1,"pageTitle":"Concepts","url":"/Structix/docs/concepts#stack","content":" A Stack is like a stack of plates: the last one you put on is the first one you take off. It follows the Last-In, First-Out (LIFO) principle. Use it when you need to undo actions, backtrack, or manage nested operations like call stacks in programming or game state rewinds. Learn More About Stacks   ","version":"Next","tagName":"h2"},{"title":"Cons","type":0,"sectionRef":"#","url":"/Structix/docs/ProsAndCons/cons","content":"Cons 🐢Slight Overhead Wrapper functions add some performance and memory cost compared to raw tables, though negligible in most cases.📘Learning Curve Beginners unfamiliar with data structures like trees or dequeues might need some time to understand and when to use them.🚫Unnecessary Structures Most of these data structures you'll find unnecessary in development because it needs to have a very specific usecase. Roblox games typically only need structures like arrays, dictionaries to function.🔄Manual Replication Structix data is local to memory, meaning you'll need to handle syncing between client/server manually if needed.🪶Not Always Relevant For very small, temporary, or throwaway data sets, plain roblox tables might be simpler and faster to use.","keywords":"","version":"Next"},{"title":"Pros","type":0,"sectionRef":"#","url":"/Structix/docs/ProsAndCons/pros","content":"Pros 🔒Strict Typing &amp; API Safety Structix somewhat enforces strict types, reducing runtime errors and catches mistakes early making it great for any scale projects.📖Readable, Maintainable Code We love readable code!⚙️Customizable Behavior Support for modes, comparators, and features like min/max in (Heap, Priority Queue) which lets you tailor performance and logic to your needs.📋Unified Interface Consistent methods like size, clear, copy across all structures reduce the learning curve and makes it easy to compare structure sizes/copies.🌀Safe Cloning &amp; Equality API Built in copy/equality methods making it safe and easy to copy/compare the structures.","keywords":"","version":"Next"},{"title":"Set","type":0,"sectionRef":"#","url":"/Structix/api/Set","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#new","content":"&lt;/&gt; Set.new() → SetType&lt;T&gt; Creates a new empty Set.  ","version":null,"tagName":"h3"},{"title":"getSet​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#getSet","content":"&lt;/&gt; Set.getSet(self: InternalSet&lt;T&gt;) → {[T]: boolean} Returns a shallow copy of the internal set as a table of keys.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#size","content":"&lt;/&gt; Set.size(self: InternalSet&lt;T&gt;) → number Returns the number of elements in the set.  ","version":null,"tagName":"h3"},{"title":"copy​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#copy","content":"&lt;/&gt; Set.copy(self: InternalSet&lt;T&gt;) → SetType&lt;T&gt; Returns a full copy of the set. Throws an error if the set is empty.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#clear","content":"&lt;/&gt; Set.clear(self: InternalSet&lt;T&gt;) → () Removes all elements from the set.  ","version":null,"tagName":"h3"},{"title":"isSubsetOf​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#isSubsetOf","content":"&lt;/&gt; Set.isSubsetOf( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → boolean Returns true if the current set is a subset of another.  ","version":null,"tagName":"h3"},{"title":"isSupersetOf​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#isSupersetOf","content":"&lt;/&gt; Set.isSupersetOf( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → boolean Returns true if the current set is a superset of another.  ","version":null,"tagName":"h3"},{"title":"isDisjoint​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#isDisjoint","content":"&lt;/&gt; Set.isDisjoint( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → boolean Returns true if there are no shared elements between two sets.  ","version":null,"tagName":"h3"},{"title":"contains​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#contains","content":"&lt;/&gt; Set.contains( self: InternalSet&lt;T&gt;, value: T ) → boolean Checks whether the set contains the specified value.  ","version":null,"tagName":"h3"},{"title":"add​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#add","content":"&lt;/&gt; Set.add( self: InternalSet&lt;T&gt;, value: T ) → () Adds a value to the set if it is not already present.  ","version":null,"tagName":"h3"},{"title":"remove​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#remove","content":"&lt;/&gt; Set.remove( self: InternalSet&lt;T&gt;, value: T ) → () Removes a value from the set. Throws if the value does not exist.  ","version":null,"tagName":"h3"},{"title":"removeAt​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#removeAt","content":"&lt;/&gt; Set.removeAt( self: InternalSet&lt;T&gt;, index: number ) → T Removes and returns the value at the given index.  ","version":null,"tagName":"h3"},{"title":"discard​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#discard","content":"&lt;/&gt; Set.discard( self: InternalSet&lt;T&gt;, value: T ) → () Removes a value from the set if it exists. Does nothing otherwise.  ","version":null,"tagName":"h3"},{"title":"pop​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#pop","content":"&lt;/&gt; Set.pop(self: InternalSet&lt;T&gt;) → T Removes and returns a random element from the set. Throws an error if the set is empty.  ","version":null,"tagName":"h3"},{"title":"union​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#union","content":"&lt;/&gt; Set.union( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → SetType&lt;T&gt; Returns the union of two sets.  ","version":null,"tagName":"h3"},{"title":"intersection​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#intersection","content":"&lt;/&gt; Set.intersection( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → SetType&lt;T&gt; Returns the intersection of two sets.  ","version":null,"tagName":"h3"},{"title":"difference​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#difference","content":"&lt;/&gt; Set.difference( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → SetType&lt;T&gt; Returns the difference between two sets.  ","version":null,"tagName":"h3"},{"title":"symmetric_Difference​","type":1,"pageTitle":"Set","url":"/Structix/api/Set#symmetric_Difference","content":"&lt;/&gt; Set.symmetric_Difference( self: InternalSet&lt;T&gt;, otherSet: SetType&lt;T&gt; ) → SetType&lt;T&gt; Returns the symmetric difference between two sets (values in either but not both). ","version":null,"tagName":"h3"}],"options":{"id":"default"}}